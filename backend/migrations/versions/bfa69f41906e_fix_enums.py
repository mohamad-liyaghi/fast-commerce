"""fix_enums

Revision ID: bfa69f41906e
Revises: 62d8af1cf62f
Create Date: 2023-09-08 09:45:42.185720

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bfa69f41906e'
down_revision: Union[str, None] = '62d8af1cf62f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_index('ix_vendors_id', table_name='vendors')
    op.execute("DROP TABLE vendors CASCADE")
    op.drop_index('ix_products_id', table_name='products')
    op.execute("DROP TABLE products CASCADE")
    op.drop_index('ix_order_items_id', table_name='order_items')
    op.execute("DROP TABLE order_items CASCADE")
    op.drop_index('ix_orders_id', table_name='orders')
    op.execute("DROP TABLE orders CASCADE")
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.execute("DROP TABLE users CASCADE")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=25), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('date_joined', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('uuid', name='users_uuid_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('orders_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('delivery_address', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('total_price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING_PAYMENT', 'PREPARING', 'DELIVERING', 'DELIVERED', name='orderstatusenum'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='orders_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='orders_pkey'),
    sa.UniqueConstraint('uuid', name='orders_uuid_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_orders_id', 'orders', ['id'], unique=False)
    op.create_table('order_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('total_price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING_PAYMENT', 'PREPARING', 'DELIVERING', 'DELIVERED', name='orderitemstatusenum'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('vendor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='order_items_order_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='order_items_product_id_fkey'),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], name='order_items_vendor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='order_items_pkey'),
    sa.UniqueConstraint('uuid', name='order_items_uuid_key')
    )
    op.create_index('ix_order_items_id', 'order_items', ['id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=300), autoincrement=False, nullable=False),
    sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('specs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('vendor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='products_user_id_fkey'),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], name='products_vendor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    sa.UniqueConstraint('uuid', name='products_uuid_key')
    )
    op.create_index('ix_products_id', 'products', ['id'], unique=False)
    op.create_table('vendors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=300), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('reviewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('domain', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'ACCEPTED', 'REJECTED', name='vendorstatusenum'), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reviewer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='vendors_owner_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], name='vendors_reviewer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='vendors_pkey'),
    sa.UniqueConstraint('uuid', name='vendors_uuid_key')
    )
    op.create_index('ix_vendors_id', 'vendors', ['id'], unique=False)
    # ### end Alembic commands ###
